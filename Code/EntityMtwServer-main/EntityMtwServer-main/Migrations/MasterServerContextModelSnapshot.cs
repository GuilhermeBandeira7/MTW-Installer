// <auto-generated />
using System;
using EntityMtwServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityMtwServer.Migrations
{
    [DbContext(typeof(MasterServerContext))]
    partial class MasterServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EntityMtwServer.Entities.Action", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ActionValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Authorization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OriginId")
                        .HasColumnType("bigint");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypePerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OriginId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.CameraControlAlarm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("EquipmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("InOffAlarm")
                        .HasColumnType("bit");

                    b.Property<bool>("InOnAlarm")
                        .HasColumnType("bit");

                    b.Property<bool>("OutOffAlarm")
                        .HasColumnType("bit");

                    b.Property<bool>("OutOnAlarm")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CameraControlAlarms");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Class", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurriculumCourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("InstructorDeviceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InstructorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CurriculumCourseId");

                    b.HasIndex("InstructorDeviceId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("CurriculumCourseId")
                        .HasColumnType("bigint");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumCourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.CurriculumCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CurriculumCourses");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Equipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryRtsp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryStreamingRtsp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SencondaryRtsp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SencondaryStreamingRtsp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Gateway", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("GatewayIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GatewayPort")
                        .HasColumnType("int");

                    b.Property<string>("ServerRemoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TelemetryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TelemetryId");

                    b.ToTable("Gateways");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.LprRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Alert")
                        .HasColumnType("bit");

                    b.Property<string>("Authorization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Digital")
                        .HasColumnType("bit");

                    b.Property<bool>("Email")
                        .HasColumnType("bit");

                    b.Property<long?>("LprId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OriginId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PermanentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Processed")
                        .HasColumnType("bit");

                    b.Property<long?>("VisitorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Warning")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LprId");

                    b.HasIndex("OriginId");

                    b.HasIndex("PermanentId");

                    b.HasIndex("VisitorId");

                    b.ToTable("LprRecords");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Lprs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AcessId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Context1Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Context2Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Context3Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Context4Id")
                        .HasColumnType("bigint");

                    b.Property<bool>("ContextUrl")
                        .HasColumnType("bit");

                    b.Property<long?>("ControllerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DatabaseTime")
                        .HasColumnType("int");

                    b.Property<long?>("EquipmentId")
                        .HasColumnType("bigint");

                    b.Property<int>("FalseTime")
                        .HasColumnType("int");

                    b.Property<int>("Fps")
                        .HasColumnType("int");

                    b.Property<int>("ImageTime")
                        .HasColumnType("int");

                    b.Property<string>("LprName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxCharHeight")
                        .HasColumnType("int");

                    b.Property<int>("MinCharHeight")
                        .HasColumnType("int");

                    b.Property<long?>("OriginId")
                        .HasColumnType("bigint");

                    b.Property<int>("Precision")
                        .HasColumnType("int");

                    b.Property<bool>("RecognizeMovement")
                        .HasColumnType("bit");

                    b.Property<int>("RefreshTime")
                        .HasColumnType("int");

                    b.Property<int>("ResultConfirmation")
                        .HasColumnType("int");

                    b.Property<int>("Rotation")
                        .HasColumnType("int");

                    b.Property<int>("Threads")
                        .HasColumnType("int");

                    b.Property<int>("x1")
                        .HasColumnType("int");

                    b.Property<int>("x2")
                        .HasColumnType("int");

                    b.Property<int>("x3")
                        .HasColumnType("int");

                    b.Property<int>("x4")
                        .HasColumnType("int");

                    b.Property<int>("y1")
                        .HasColumnType("int");

                    b.Property<int>("y2")
                        .HasColumnType("int");

                    b.Property<int>("y3")
                        .HasColumnType("int");

                    b.Property<int>("y4")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcessId");

                    b.HasIndex("Context1Id");

                    b.HasIndex("Context2Id");

                    b.HasIndex("Context3Id");

                    b.HasIndex("Context4Id");

                    b.HasIndex("ControllerId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("OriginId");

                    b.ToTable("Lprs");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Origin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("OriginCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TelemetryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TelemetryId");

                    b.ToTable("Origins");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Period", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Permanent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("EndValidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartValidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Permanents");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Profile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("AcessAction")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessAddEquipament")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessAddGroup")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessAlarm")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessAnalyzer")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessCameraControl")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessEditEquipment")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessEditGroup")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessLpr")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessMasterEye")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessModel")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessOrigin")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessPeriod")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessPermanent")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessRecord")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessRecordVideo")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessRemoveEquipment")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessRemoveGroup")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessRestrictedPlate")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessSchedule")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessTelemetry")
                        .HasColumnType("bit");

                    b.Property<bool>("AcessVisitor")
                        .HasColumnType("bit");

                    b.Property<bool>("LprRecord")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.RestrictedPlate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndValidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartValidDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RestrictedPlates");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("FridayEndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FridayRemote")
                        .HasColumnType("bit");

                    b.Property<string>("FridayStartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MondayEndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MondayRemote")
                        .HasColumnType("bit");

                    b.Property<string>("MondayStartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SaturdayEndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SaturdayRemote")
                        .HasColumnType("bit");

                    b.Property<string>("SaturdayStartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SundayEndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SundayRemote")
                        .HasColumnType("bit");

                    b.Property<string>("SundayStartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThursdayEndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ThursdayRemote")
                        .HasColumnType("bit");

                    b.Property<string>("ThursdayStartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TuesdayEndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TuesdayRemote")
                        .HasColumnType("bit");

                    b.Property<string>("TuesdayStartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WednesdayEndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WednesdayRemote")
                        .HasColumnType("bit");

                    b.Property<string>("WednesdayStartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Filter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("InstructorDeviceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InstructorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Live")
                        .HasColumnType("bit");

                    b.Property<string>("MainRtsp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Record")
                        .HasColumnType("bit");

                    b.Property<string>("RecordPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requisition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("SubRtsp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("InstructorDeviceId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("LiveClass")
                        .HasColumnType("int");

                    b.Property<double>("LiveHours")
                        .HasColumnType("float");

                    b.Property<int>("RemoteClass")
                        .HasColumnType("int");

                    b.Property<double>("RemoteHours")
                        .HasColumnType("float");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.TelemetryAlarm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Alarm")
                        .HasColumnType("bit");

                    b.Property<bool>("CameraIn")
                        .HasColumnType("bit");

                    b.Property<bool>("CameraInActive")
                        .HasColumnType("bit");

                    b.Property<bool>("CameraInState")
                        .HasColumnType("bit");

                    b.Property<bool>("CameraOut")
                        .HasColumnType("bit");

                    b.Property<bool>("CameraOutAcitve")
                        .HasColumnType("bit");

                    b.Property<bool>("CameraOutState")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Online")
                        .HasColumnType("bit");

                    b.Property<int>("Slot0Dc1Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot0Dc1Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot0Dc1State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot0Dc2Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot0Dc2Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot0Dc2State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot0HumMax")
                        .HasColumnType("int");

                    b.Property<int>("Slot0HumMin")
                        .HasColumnType("int");

                    b.Property<bool>("Slot0HumState")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot0In1")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot0In1Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot0In1State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot0Out1")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot0Out1Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot0Out1State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot0TempMax")
                        .HasColumnType("int");

                    b.Property<int>("Slot0TempMin")
                        .HasColumnType("int");

                    b.Property<bool>("Slot0TempState")
                        .HasColumnType("bit");

                    b.Property<int>("Slot2Ac1Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot2Ac1Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot2Ac1State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot2Ac2Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot2Ac2Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot2Ac2State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot2Ac3Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot2Ac3Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot2Ac3State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot2Dc1Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot2Dc1Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot2Dc1State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot2Dc2Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot2Dc2Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot2Dc2State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2In1")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2In1Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2In1State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2In2")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2In2Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2In2State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2In3")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2In3Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2In3State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2Out1")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2Out1Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2Out1State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2Out2")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2Out2Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2Out2State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2Out3")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2Out3Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot2Out3State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot3Ac1Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot3Ac1Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot3Ac1State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot3Ac2Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot3Ac2Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot3Ac2State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot3Ac3Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot3Ac3Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot3Ac3State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot3Dc1Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot3Dc1Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot3Dc1State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot3Dc2Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot3Dc2Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot3Dc2State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3In1")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3In1Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3In1State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3In2")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3In2Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3In2State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3In3")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3In3Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3In3State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3Out1")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3Out1Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3Out1State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3Out2")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3Out2Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3Out2State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3Out3")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3Out3Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot3Out3State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot4Ac1Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot4Ac1Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot4Ac1State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot4Ac2Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot4Ac2Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot4Ac2State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot4Ac3Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot4Ac3Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot4Ac3State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot4Dc1Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot4Dc1Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot4Dc1State")
                        .HasColumnType("bit");

                    b.Property<int>("Slot4Dc2Max")
                        .HasColumnType("int");

                    b.Property<int>("Slot4Dc2Min")
                        .HasColumnType("int");

                    b.Property<bool>("Slot4Dc2State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4In1")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4In1Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4In1State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4In2")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4In2Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4In2State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4In3")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4In3Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4In3State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4Out1")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4Out1Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4Out1State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4Out2")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4Out2Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4Out2State")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4Out3")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4Out3Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Slot4Out3State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TelemetryAlarms");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.TelemetryMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.Property<long>("TelemetryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TelemetryId");

                    b.ToTable("TelemetryMessages");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.TypeField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeFields");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.UserAlarm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("OriginEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SmsCheck")
                        .HasColumnType("bit");

                    b.Property<int>("SmtpPort")
                        .HasColumnType("int");

                    b.Property<string>("SmtpServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetTelephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAlarms");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Visitor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("AuthorizationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PeriodId")
                        .HasColumnType("bigint");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("EquipmentGroup", b =>
                {
                    b.Property<long>("EquipmentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupsId")
                        .HasColumnType("bigint");

                    b.HasKey("EquipmentsId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("EquipmentGroup");
                });

            modelBuilder.Entity("EquipmentServer", b =>
                {
                    b.Property<long>("ServerEquipmentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServersId")
                        .HasColumnType("bigint");

                    b.HasKey("ServerEquipmentsId", "ServersId");

                    b.HasIndex("ServersId");

                    b.ToTable("EquipmentServer");
                });

            modelBuilder.Entity("EquipmentSession", b =>
                {
                    b.Property<long>("EquipmentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionsId")
                        .HasColumnType("bigint");

                    b.HasKey("EquipmentsId", "SessionsId");

                    b.HasIndex("SessionsId");

                    b.ToTable("EquipmentSession");
                });

            modelBuilder.Entity("EquipmentUser", b =>
                {
                    b.Property<long>("EquipmentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("EquipmentsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("EquipmentUser");
                });

            modelBuilder.Entity("GroupServer", b =>
                {
                    b.Property<long>("ServerGroupsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServersId")
                        .HasColumnType("bigint");

                    b.HasKey("ServerGroupsId", "ServersId");

                    b.HasIndex("ServersId");

                    b.ToTable("GroupServer");
                });

            modelBuilder.Entity("GroupSession", b =>
                {
                    b.Property<long>("CellsId")
                        .HasColumnType("bigint");

                    b.Property<long>("SessionsId")
                        .HasColumnType("bigint");

                    b.HasKey("CellsId", "SessionsId");

                    b.HasIndex("SessionsId");

                    b.ToTable("GroupSession");
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<long>("GroupsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("SessionStudent", b =>
                {
                    b.Property<long>("AttendedClassesId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentsId")
                        .HasColumnType("bigint");

                    b.HasKey("AttendedClassesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("SessionStudent");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.CameraControl", b =>
                {
                    b.HasBaseType("EntityMtwServer.Entities.Equipment");

                    b.Property<string>("CameraInOffColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CameraInOffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CameraInOnColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CameraInOnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CameraInStatus")
                        .HasColumnType("bit");

                    b.Property<string>("CameraOutOffColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CameraOutOffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CameraOutOnColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CameraOutOnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CameraOutStatus")
                        .HasColumnType("bit");

                    b.Property<int>("CameraOutputPeriod")
                        .HasColumnType("int");

                    b.Property<bool>("CameraOutputPulse")
                        .HasColumnType("bit");

                    b.Property<string>("CommandPort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaPort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TelemetryId")
                        .HasColumnType("bigint");

                    b.Property<int>("alarmTime")
                        .HasColumnType("int");

                    b.HasIndex("TelemetryId");

                    b.ToTable("CameraControl");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.DVC", b =>
                {
                    b.HasBaseType("EntityMtwServer.Entities.Equipment");

                    b.Property<bool>("AudioEnable")
                        .HasColumnType("bit");

                    b.Property<string>("Function")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationalSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PermanentStream")
                        .HasColumnType("bit");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ServerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StatusDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("TelemetryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("VideoEnable")
                        .HasColumnType("bit");

                    b.HasIndex("ServerId");

                    b.HasIndex("TelemetryId");

                    b.ToTable("DVC");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Record", b =>
                {
                    b.HasBaseType("EntityMtwServer.Entities.Equipment");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("RecordPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemotePassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemoteUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Record");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Server", b =>
                {
                    b.HasBaseType("EntityMtwServer.Entities.Equipment");

                    b.Property<bool>("DigifortServer")
                        .HasColumnType("bit");

                    b.Property<bool>("LprServer")
                        .HasColumnType("bit");

                    b.Property<bool>("MasterEyeServer")
                        .HasColumnType("bit");

                    b.Property<bool>("RecordServer")
                        .HasColumnType("bit");

                    b.Property<bool>("RtspServer")
                        .HasColumnType("bit");

                    b.Property<bool>("SessionServer")
                        .HasColumnType("bit");

                    b.Property<bool>("TelemetryServer")
                        .HasColumnType("bit");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Telemetry", b =>
                {
                    b.HasBaseType("EntityMtwServer.Entities.Equipment");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Telemetry");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Action", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Class", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("EntityMtwServer.Entities.CurriculumCourse", "CurriculumCourse")
                        .WithMany()
                        .HasForeignKey("CurriculumCourseId");

                    b.HasOne("EntityMtwServer.Entities.DVC", "InstructorDevice")
                        .WithMany()
                        .HasForeignKey("InstructorDeviceId");

                    b.HasOne("EntityMtwServer.Entities.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.HasOne("EntityMtwServer.Entities.Schedule", "Period")
                        .WithMany()
                        .HasForeignKey("ScheduleId");

                    b.Navigation("Course");

                    b.Navigation("CurriculumCourse");

                    b.Navigation("Instructor");

                    b.Navigation("InstructorDevice");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Course", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.CurriculumCourse", null)
                        .WithMany("Courses")
                        .HasForeignKey("CurriculumCourseId");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Event", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Session", null)
                        .WithMany("Events")
                        .HasForeignKey("SessionId");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Gateway", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Telemetry", null)
                        .WithMany("Gateways")
                        .HasForeignKey("TelemetryId");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Group", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Group", null)
                        .WithMany("Subgroups")
                        .HasForeignKey("GroupId");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.LprRecord", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Lprs", "Lpr")
                        .WithMany()
                        .HasForeignKey("LprId");

                    b.HasOne("EntityMtwServer.Entities.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId");

                    b.HasOne("EntityMtwServer.Entities.Permanent", "Permanent")
                        .WithMany()
                        .HasForeignKey("PermanentId");

                    b.HasOne("EntityMtwServer.Entities.Visitor", "Visitor")
                        .WithMany()
                        .HasForeignKey("VisitorId");

                    b.Navigation("Lpr");

                    b.Navigation("Origin");

                    b.Navigation("Permanent");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Lprs", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Equipment", "Acess")
                        .WithMany()
                        .HasForeignKey("AcessId");

                    b.HasOne("EntityMtwServer.Entities.Equipment", "Context1")
                        .WithMany()
                        .HasForeignKey("Context1Id");

                    b.HasOne("EntityMtwServer.Entities.Equipment", "Context2")
                        .WithMany()
                        .HasForeignKey("Context2Id");

                    b.HasOne("EntityMtwServer.Entities.Equipment", "Context3")
                        .WithMany()
                        .HasForeignKey("Context3Id");

                    b.HasOne("EntityMtwServer.Entities.Equipment", "Context4")
                        .WithMany()
                        .HasForeignKey("Context4Id");

                    b.HasOne("EntityMtwServer.Entities.Equipment", "Controller")
                        .WithMany()
                        .HasForeignKey("ControllerId");

                    b.HasOne("EntityMtwServer.Entities.Equipment", "LprCamera")
                        .WithMany()
                        .HasForeignKey("EquipmentId");

                    b.HasOne("EntityMtwServer.Entities.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId");

                    b.Navigation("Acess");

                    b.Navigation("Context1");

                    b.Navigation("Context2");

                    b.Navigation("Context3");

                    b.Navigation("Context4");

                    b.Navigation("Controller");

                    b.Navigation("LprCamera");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Origin", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Telemetry", "Telemetry")
                        .WithMany()
                        .HasForeignKey("TelemetryId");

                    b.Navigation("Telemetry");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Permanent", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityMtwServer.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Session", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Class", "Class")
                        .WithMany("Sessions")
                        .HasForeignKey("ClassId");

                    b.HasOne("EntityMtwServer.Entities.DVC", "InstructorDevice")
                        .WithMany()
                        .HasForeignKey("InstructorDeviceId");

                    b.HasOne("EntityMtwServer.Entities.User", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId");

                    b.Navigation("Class");

                    b.Navigation("Instructor");

                    b.Navigation("InstructorDevice");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Student", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId");

                    b.HasOne("EntityMtwServer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.TelemetryMessage", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Telemetry", "Telemetry")
                        .WithMany()
                        .HasForeignKey("TelemetryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Telemetry");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.User", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.HasOne("EntityMtwServer.Entities.Team", null)
                        .WithMany("Members")
                        .HasForeignKey("TeamId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Visitor", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityMtwServer.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Period");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EquipmentGroup", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityMtwServer.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipmentServer", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Equipment", null)
                        .WithMany()
                        .HasForeignKey("ServerEquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityMtwServer.Entities.Server", null)
                        .WithMany()
                        .HasForeignKey("ServersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipmentSession", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityMtwServer.Entities.Session", null)
                        .WithMany()
                        .HasForeignKey("SessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipmentUser", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityMtwServer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupServer", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("ServerGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityMtwServer.Entities.Server", null)
                        .WithMany()
                        .HasForeignKey("ServersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupSession", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("CellsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityMtwServer.Entities.Session", null)
                        .WithMany()
                        .HasForeignKey("SessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityMtwServer.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SessionStudent", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Session", null)
                        .WithMany()
                        .HasForeignKey("AttendedClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityMtwServer.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityMtwServer.Entities.CameraControl", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Equipment", null)
                        .WithOne()
                        .HasForeignKey("EntityMtwServer.Entities.CameraControl", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("EntityMtwServer.Entities.Telemetry", "Telemetry")
                        .WithMany()
                        .HasForeignKey("TelemetryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Telemetry");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.DVC", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Equipment", null)
                        .WithOne()
                        .HasForeignKey("EntityMtwServer.Entities.DVC", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("EntityMtwServer.Entities.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerId");

                    b.HasOne("EntityMtwServer.Entities.Telemetry", "Telemetry")
                        .WithMany()
                        .HasForeignKey("TelemetryId");

                    b.Navigation("Server");

                    b.Navigation("Telemetry");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Record", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Equipment", null)
                        .WithOne()
                        .HasForeignKey("EntityMtwServer.Entities.Record", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Server", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Equipment", null)
                        .WithOne()
                        .HasForeignKey("EntityMtwServer.Entities.Server", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Telemetry", b =>
                {
                    b.HasOne("EntityMtwServer.Entities.Equipment", null)
                        .WithOne()
                        .HasForeignKey("EntityMtwServer.Entities.Telemetry", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Class", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.CurriculumCourse", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Group", b =>
                {
                    b.Navigation("Subgroups");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Session", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Team", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("EntityMtwServer.Entities.Telemetry", b =>
                {
                    b.Navigation("Gateways");
                });
#pragma warning restore 612, 618
        }
    }
}
